# =============================================================================
# SERVER-SENT EVENTS (SSE) EXAMPLE CONFIGURATION
# =============================================================================
# Reference configuration for SSE proxying in nginx
# Copy relevant sections to your site configuration as needed
#
# SSE provides unidirectional real-time communication from server to client
# Uses standard HTTP/HTTPS with Content-Type: text/event-stream

# =============================================================================
# SSE VS WEBSOCKET
# =============================================================================
# SSE: Server â†’ Client only, automatic reconnection, simpler
# WebSocket: Bidirectional, manual reconnection, more complex

# =============================================================================
# BASIC SSE LOCATION BLOCK
# =============================================================================

location /events {
    proxy_pass http://sse_backend;

    # Standard proxy headers
    include snippets/proxy-headers.conf;

    # SSE-specific headers
    proxy_set_header Accept            text/event-stream;
    proxy_set_header Cache-Control     no-cache;

    # Critical: Disable proxy buffering for real-time streaming
    proxy_buffering                    off;
    proxy_cache                        off;

    # Extended timeouts for long-lived SSE connections
    proxy_read_timeout                 24h;
    proxy_send_timeout                 24h;
    proxy_connect_timeout              60s;

    # Handle chunked transfer encoding properly
    proxy_http_version                 1.1;
    proxy_set_header Connection        "";

    # Ensure proper content type is maintained
    proxy_set_header X-Accel-Buffering no;

    # Optional: Add CORS headers for cross-origin SSE
    add_header Access-Control-Allow-Origin *;
    add_header Access-Control-Allow-Methods "GET, OPTIONS";
    add_header Access-Control-Allow-Headers "Cache-Control";
}

# =============================================================================
# SSE WITH AUTHENTICATION AND RATE LIMITING
# =============================================================================

location /secure-events {
    # Rate limiting for SSE connections
    limit_req zone=api burst=5 nodelay;

    proxy_pass http://sse_backend;

    # Forward authentication headers
    proxy_set_header Authorization     $http_authorization;
    proxy_set_header Cookie            $http_cookie;

    # Standard proxy headers
    include snippets/proxy-headers.conf;

    # SSE-specific settings
    proxy_buffering                    off;
    proxy_cache                        off;
    proxy_read_timeout                 24h;
    proxy_send_timeout                 24h;
    proxy_http_version                 1.1;
    proxy_set_header Connection        "";
    proxy_set_header X-Accel-Buffering no;

    # Security headers for SSE
    add_header X-Content-Type-Options  nosniff;
    add_header X-Frame-Options         DENY;
    add_header X-XSS-Protection        "1; mode=block";
}

# =============================================================================
# SSE BACKEND DEFINITION
# =============================================================================

upstream sse_backend {
    # SSE backend servers
    server backend1.example.com:8080;
    server backend2.example.com:8080;

    # Keep connections alive for efficiency
    keepalive 32;
    keepalive_requests 1000;
    keepalive_timeout 60s;

    # Use least_conn for better load distribution with long-lived connections
    least_conn;
}

# =============================================================================
# USAGE INSTRUCTIONS
# =============================================================================
# 1. Copy the location block you need to your site configuration
# 2. Copy the upstream block and customize your backend servers
# 3. For simple SSE: use the basic location block
# 4. For authenticated SSE: use the secure location block
# 5. Test with: curl -N -H "Accept: text/event-stream" http://your-domain/events
#
# BACKEND REQUIREMENTS:
# - Send Content-Type: text/event-stream
# - Use proper SSE format: "data: message\n\n"
# - Handle client disconnections gracefully
# - Implement heartbeat/keep-alive messages
