# =============================================================================
# NGINX PERFORMANCE OPTIMIZATIONS
# =============================================================================
# These settings optimize nginx for high-traffic production environments
# by reducing system calls, improving memory usage, and managing connections

# =============================================================================
# FILE CACHING OPTIMIZATION
# =============================================================================
# Cache file descriptors to reduce open/close system calls for frequently accessed files
# Significantly improves performance for static file serving and reduces I/O overhead

# Cache up to 10,000 file descriptors, remove inactive entries after 20s
# Why: Reduces file system overhead for static assets (CSS, JS, images)
# Impact: Can improve static file serving performance by 20-30%
open_file_cache          max=10000 inactive=20s;

# Revalidate cached file info every 30 seconds
# Why: Balances cache efficiency with file change detection
# Impact: Prevents serving stale file metadata while maintaining performance
open_file_cache_valid    30s;

# Only cache files accessed at least 2 times during inactive period
# Why: Prevents caching of rarely accessed files, keeps cache relevant
# Impact: Improves cache hit ratio and memory efficiency
open_file_cache_min_uses 2;

# Cache file not found errors to avoid repeated filesystem lookups
# Why: Prevents repeated stat() calls for missing files (404s)
# Impact: Reduces I/O load when clients request non-existent resources
open_file_cache_errors   on;

# =============================================================================
# OUTPUT BUFFERING OPTIMIZATION
# =============================================================================
# Optimize how nginx buffers and sends responses to reduce system calls

# Use 2 buffers of 32KB each for output buffering
# Why: Reduces write() system calls by batching small responses
# Impact: Improves efficiency for dynamic content and small files
output_buffers           2 32k;

# Postpone sending until at least 1460 bytes are ready (typical MTU size)
# Why: Aligns with network packet size to reduce TCP fragmentation
# Impact: Improves network efficiency and reduces packet overhead
postpone_output          1460;

# =============================================================================
# SENDFILE OPTIMIZATION
# =============================================================================
# Optimize large file transfers using kernel-level sendfile()

# Limit sendfile chunks to 2MB to prevent blocking other connections
# Why: Prevents large file transfers from monopolizing worker processes
# Impact: Maintains responsiveness during large file downloads
sendfile_max_chunk       2m;

# =============================================================================
# CONNECTION MANAGEMENT
# =============================================================================
# Optimize connection handling and cleanup

# Immediately reset connections that have timed out
# Why: Frees up resources faster and prevents connection pool exhaustion
# Impact: Improves server resilience under high load and slow clients
reset_timedout_connection on;

# =============================================================================
# CLIENT TIMEOUT OPTIMIZATION
# =============================================================================
# Set aggressive but reasonable timeouts to prevent resource exhaustion

# Wait max 12 seconds for client to send request body
# Why: Prevents slow/malicious clients from holding connections indefinitely
# Impact: Protects against slowloris-style attacks and resource exhaustion
client_body_timeout      12s;

# Wait max 12 seconds for client to send complete headers
# Why: Prevents incomplete requests from consuming worker connections
# Impact: Improves server stability under attack or with slow clients
client_header_timeout    12s;

# Wait max 10 seconds for client to accept response data
# Why: Prevents slow clients from blocking worker processes
# Impact: Maintains server responsiveness when serving slow connections
send_timeout             10s;