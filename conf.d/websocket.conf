# =============================================================================
# NGINX WEBSOCKET PROXY CONFIGURATION
# Comprehensive WebSocket proxy configuration for nginx reverse proxy setups
# Handles WebSocket protocol upgrades, client IP forwarding, and real-time apps
# Compliant with RFC 6455 (WebSocket) and RFC 7239 (Forwarded header)
#
# USAGE: Include this file only in sites that need WebSocket support
# Add to server block: include conf.d/websocket.conf;

# =============================================================================
# WEBSOCKET CONNECTION UPGRADE MAPPING
# =============================================================================

# Map the Upgrade header to determine connection type
# Why: WebSocket requires protocol upgrade from HTTP to WebSocket
# Impact: Enables proper WebSocket handshake and connection management
# Standard: RFC 6455 - The WebSocket Protocol
map $http_upgrade $connection_upgrade {
    default upgrade;    # If Upgrade header exists, set Connection to "upgrade"
    ''      close;      # If no Upgrade header, close the connection normally
}

# =============================================================================
# ADVANCED CLIENT IP FORWARDING (RFC 7239 COMPLIANT)
# =============================================================================

# Format client IP addresses for RFC 7239 Forwarded header
# Handles IPv4, IPv6, and Unix domain sockets correctly for enterprise environments
map $remote_addr $proxy_forwarded_elem {
    # IPv4 addresses (standard format)
    ~^[0-9.]+$        "for=$remote_addr";
    
    # IPv6 addresses (bracketed and quoted per RFC 7239)
    ~^[0-9A-Fa-f:.]+$ "for=\"[$remote_addr]\"";
    
    # Unix domain sockets (cannot be represented in RFC 7239)
    default           "for=unknown";
}

# Complex RFC 7239 Forwarded header management (commented out for compatibility)
# Use simplified approach: proxy_set_header Forwarded "for=$remote_addr;host=$host;proto=$scheme";
# 
# map $http_forwarded $proxy_add_forwarded {
#     # Validate and append to existing RFC 7239 compliant Forwarded header
#     "~^(,[ \\\\t]*)*([!#$%&'*+.^_`|~0-9A-Za-z-]+=([!#$%&'*+.^_`|~0-9A-Za-z-]+|\\\"([\\\\t \\\\x21\\\\x23-\\\\x5B\\\\x5D-\\\\x7E\\\\x80-\\\\xFF]|\\\\\\\\[\\\\t \\\\x21-\\\\x7E\\\\x80-\\\\xFF])*\\\"))?(;([!#$%&'*+.^_`|~0-9A-Za-z-]+=([!#$%&'*+.^_`|~0-9A-Za-z-]+|\\\"([\\\\t \\\\x21\\\\x23-\\\\x5B\\\\x5D-\\\\x7E\\\\x80-\\\\xFF]|\\\\\\\\[\\\\t \\\\x21-\\\\x7E\\\\x80-\\\\xFF])*\\\"))?)*([ \\\\t]*,([ \\\\t]*([!#$%&'*+.^_`|~0-9A-Za-z-]+=([!#$%&'*+.^_`|~0-9A-Za-z-]+|\\\"([\\\\t \\\\x21\\\\x23-\\\\x5B\\\\x5D-\\\\x7E\\\\x80-\\\\xFF]|\\\\\\\\[\\\\t \\\\x21-\\\\x7E\\\\x80-\\\\xFF])*\\\"))?(;([!#$%&'*+.^_`|~0-9A-Za-z-]+=([!#$%&'*+.^_`|~0-9A-Za-z-]+|\\\"([\\\\t \\\\x21\\\\x23-\\\\x5B\\\\x5D-\\\\x7E\\\\x80-\\\\xFF]|\\\\\\\\[\\\\t \\\\x21-\\\\x7E\\\\x80-\\\\xFF])*\\\"))?)*)?)*$" "$http_forwarded, $proxy_forwarded_elem";
#     
#     # Replace invalid or missing Forwarded header
#     default "$proxy_forwarded_elem";
# }

# =============================================================================
# WEBSOCKET PROXY HEADERS
# =============================================================================
# Essential headers for WebSocket protocol negotiation and functionality

# Forward WebSocket upgrade header for real-time applications
# Why: Required for WebSocket protocol negotiation with backend
# Impact: Enables WebSocket functionality through the proxy
# Usage: Include in location blocks that handle WebSocket connections
# proxy_set_header Upgrade           $http_upgrade;

# Forward dynamic connection header based on upgrade request
# Why: Tells backend about protocol upgrade requests dynamically
# Impact: Essential for WebSocket upgrade mechanisms and normal HTTP requests
# Usage: Include in location blocks that handle WebSocket connections
# proxy_set_header Connection        $connection_upgrade;

# =============================================================================
# WEBSOCKET TIMEOUT OPTIMIZATION
# =============================================================================

# Extended read timeout for WebSocket connections
# Why: WebSocket connections can be long-lived with infrequent data
# Impact: Prevents premature connection termination during idle periods
# Recommendation: Set higher than standard proxy_read_timeout (e.g., 3600s)
# Usage: Configure in location blocks handling WebSocket traffic
# proxy_read_timeout                 3600s;

# =============================================================================
# WEBSOCKET CACHE BYPASS
# =============================================================================

# Bypass cache for WebSocket upgrade requests
# Why: WebSocket connections are stateful and should never be cached
# Impact: Ensures each WebSocket connection is handled individually
# Usage: Include in location blocks that handle WebSocket connections
# proxy_cache_bypass                 $http_upgrade;

# Disable caching for WebSocket requests
# Why: WebSocket traffic is real-time and connection-specific
# Impact: Prevents caching of WebSocket handshake and data frames
# Usage: Include in location blocks that handle WebSocket connections
# proxy_no_cache                     $http_upgrade;

# =============================================================================
# EXAMPLE WEBSOCKET LOCATION BLOCKS
# =============================================================================
# Uncomment and modify for your WebSocket endpoints

# Basic WebSocket proxy configuration (most common use case)
# location /websocket/ {
#     proxy_pass http://websocket_backend;
#     
#     # Essential WebSocket headers
#     proxy_set_header Upgrade           $http_upgrade;
#     proxy_set_header Connection        $connection_upgrade;
#     
#     # Standard proxy headers (inherit from main proxy.conf)
#     proxy_set_header Host              $host;
#     proxy_set_header X-Real-IP         $remote_addr;
#     proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
#     proxy_set_header X-Forwarded-Proto $scheme;
#     
#     # WebSocket-specific timeouts
#     proxy_read_timeout                 3600s;
#     proxy_send_timeout                 3600s;
#     
#     # Disable caching for WebSocket connections
#     proxy_cache_bypass                 $http_upgrade;
#     proxy_no_cache                     $http_upgrade;
# }

# Enterprise WebSocket proxy with RFC 7239 compliance
# Use this for load balancers, CDNs, or complex proxy chains
# location /websocket-enterprise/ {
#     proxy_pass http://websocket_backend;
#     
#     # Essential WebSocket headers
#     proxy_set_header Upgrade           $http_upgrade;
#     proxy_set_header Connection        $connection_upgrade;
#     
#     # RFC 7239 compliant forwarding (simplified for compatibility)
#     proxy_set_header Forwarded         "for=$remote_addr;host=$host;proto=$scheme";
#     
#     # Standard proxy headers
#     proxy_set_header Host              $host;
#     proxy_set_header X-Real-IP         $remote_addr;
#     proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
#     proxy_set_header X-Forwarded-Proto $scheme;
#     
#     # WebSocket-specific timeouts
#     proxy_read_timeout                 3600s;
#     proxy_send_timeout                 3600s;
#     
#     # Disable caching for WebSocket connections
#     proxy_cache_bypass                 $http_upgrade;
#     proxy_no_cache                     $http_upgrade;
# }

# =============================================================================
# WEBSOCKET BACKEND DEFINITION EXAMPLE
# =============================================================================
# Define your WebSocket backend servers

# upstream websocket_backend {
#     # WebSocket backend servers
#     server backend1.example.com:8080;
#     server backend2.example.com:8080;
#     
#     # Keep connections alive for WebSocket efficiency
#     keepalive 32;
#     
#     # Use IP hash for session persistence if needed
#     # ip_hash;
# }

# =============================================================================
# USAGE INSTRUCTIONS
# =============================================================================
# 1. This file is automatically included in nginx.conf
# 2. Choose the appropriate example above:
#    - Basic: For simple WebSocket setups (most applications)
#    - Enterprise: For complex proxy chains requiring RFC 7239 compliance
# 3. Uncomment and modify the chosen example for your endpoints
# 4. Define your WebSocket backend servers in an upstream block
# 5. Ensure your backend supports WebSocket protocol (RFC 6455)
# 6. Test WebSocket connectivity with browser developer tools or wscat
#
# MIGRATION NOTE:
# This file replaces both conf.d/websocket.conf and snippets/websocket.conf
# All WebSocket functionality is now consolidated in this single configuration