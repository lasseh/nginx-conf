# =============================================================================
# NGINX SERVER-SENT EVENTS (SSE) CONFIGURATION
# Specialized configuration for Server-Sent Events proxying and real-time data streaming
# SSE provides unidirectional real-time communication from server to client
# Compliant with HTML5 EventSource API and HTTP/1.1 chunked transfer encoding
#
# USAGE: Include this file only in sites that need SSE support
# Add to server block: include conf.d/sse.conf;

# =============================================================================
# SSE VS WEBSOCKET COMPARISON
# =============================================================================
# SSE (Server-Sent Events):
# - Unidirectional: Server → Client only
# - Uses standard HTTP/HTTPS (no protocol upgrade)
# - Automatic reconnection built-in
# - Simpler implementation than WebSocket
# - Better for real-time updates, notifications, live feeds
# - Content-Type: text/event-stream
#
# WebSocket:
# - Bidirectional: Server ↔ Client
# - Requires protocol upgrade (HTTP → WebSocket)
# - Manual reconnection handling
# - Better for interactive applications, chat, gaming

# =============================================================================
# SSE PROXY CONFIGURATION
# =============================================================================

# SSE requires specific proxy settings to handle streaming responses properly
# Key differences from standard proxy:
# 1. Disable buffering to enable real-time streaming
# 2. Extended timeouts for long-lived connections
# 3. Proper handling of chunked transfer encoding
# 4. Cache bypass for dynamic content

# =============================================================================
# EXAMPLE SSE LOCATION BLOCKS
# =============================================================================

# Basic SSE endpoint configuration
# location /events {
#     proxy_pass http://sse_backend;
#     
#     # Essential SSE headers
#     proxy_set_header Host              $host;
#     proxy_set_header X-Real-IP         $remote_addr;
#     proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
#     proxy_set_header X-Forwarded-Proto $scheme;
#     proxy_set_header Accept            text/event-stream;
#     proxy_set_header Cache-Control     no-cache;
#     
#     # Critical: Disable proxy buffering for real-time streaming
#     proxy_buffering                    off;
#     proxy_cache                        off;
#     
#     # Extended timeouts for long-lived SSE connections
#     proxy_read_timeout                 24h;
#     proxy_send_timeout                 24h;
#     proxy_connect_timeout              60s;
#     
#     # Handle chunked transfer encoding properly
#     proxy_http_version                 1.1;
#     proxy_set_header Connection        "";
#     
#     # Ensure proper content type is maintained
#     proxy_set_header X-Accel-Buffering no;
#     
#     # Optional: Add CORS headers for cross-origin SSE
#     add_header Access-Control-Allow-Origin *;
#     add_header Access-Control-Allow-Methods "GET, OPTIONS";
#     add_header Access-Control-Allow-Headers "Cache-Control";
# }

# SSE with authentication and rate limiting
# location /secure-events {
#     # Rate limiting for SSE connections
#     limit_req zone=api burst=5 nodelay;
#     
#     proxy_pass http://sse_backend;
#     
#     # Forward authentication headers
#     proxy_set_header Authorization     $http_authorization;
#     proxy_set_header Cookie            $http_cookie;
#     
#     # Standard proxy headers
#     proxy_set_header Host              $host;
#     proxy_set_header X-Real-IP         $remote_addr;
#     proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
#     proxy_set_header X-Forwarded-Proto $scheme;
#     proxy_set_header X-Request-ID      $request_id;
#     
#     # SSE-specific settings
#     proxy_buffering                    off;
#     proxy_cache                        off;
#     proxy_read_timeout                 24h;
#     proxy_send_timeout                 24h;
#     proxy_http_version                 1.1;
#     proxy_set_header Connection        "";
#     proxy_set_header X-Accel-Buffering no;
#     
#     # Security headers for SSE
#     add_header X-Content-Type-Options  nosniff;
#     add_header X-Frame-Options         DENY;
#     add_header X-XSS-Protection        "1; mode=block";
# }

# =============================================================================
# SSE BACKEND DEFINITION EXAMPLE
# =============================================================================

# upstream sse_backend {
#     # SSE backend servers
#     server backend1.example.com:8080;
#     server backend2.example.com:8080;
#     
#     # Keep connections alive for efficiency
#     keepalive 32;
#     keepalive_requests 1000;
#     keepalive_timeout 60s;
#     
#     # Use least_conn for better load distribution with long-lived connections
#     least_conn;
# }

# =============================================================================
# USAGE INSTRUCTIONS
# =============================================================================
# 1. This file is automatically included via conf.d/ directory
# 2. Uncomment and modify the appropriate example above:
#    - Basic: Simple SSE streaming
#    - Secure: SSE with authentication and rate limiting
# 3. Define your SSE backend servers in an upstream block
# 4. Ensure your backend sends proper SSE format:
#    Content-Type: text/event-stream
#    Cache-Control: no-cache
#    Connection: keep-alive
# 5. Test SSE connectivity with browser EventSource API or curl:
#    curl -N -H "Accept: text/event-stream" http://your-domain/events
#
# BACKEND REQUIREMENTS:
# - Send Content-Type: text/event-stream
# - Use proper SSE format: "data: message\n\n"
# - Handle client disconnections gracefully
# - Implement heartbeat/keep-alive messages for connection health