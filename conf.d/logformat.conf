# =============================================================================
# NGINX LOG FORMATS
# =============================================================================
# Comprehensive collection of log formats for different use cases
# Usage: access_log /var/log/nginx/access.log <format_name>;

# =============================================================================
# BASIC LOCAL LOGGING
# =============================================================================

# Standard nginx combined format (default)
# Use for: Basic local logging, simple setups
# Example: 192.168.1.100 - - [28/Jun/2025:10:30:45 +0000] "GET /index.html HTTP/1.1" 200 1234 "https://example.com" "Mozilla/5.0..."
# Note: 'combined' format is built into nginx, so we use 'standard' instead
log_format standard '$remote_addr - $remote_user [$time_local] '
                   '"$request" $status $body_bytes_sent '
                   '"$http_referer" "$http_user_agent"';

# Enhanced local format with timing and request ID
# Use for: Local development, debugging, performance monitoring
# Example: 192.168.1.100 - - [28/Jun/2025:10:30:45 +0000] "GET /api/users HTTP/1.1" 200 1234 0.123 abc123def456 "https://example.com" "Mozilla/5.0..."
log_format enhanced '$remote_addr - $remote_user [$time_local] '
                   '"$request" $status $body_bytes_sent $request_time '
                   '$request_id "$http_referer" "$http_user_agent"';

# Human readable format for development
# Use for: Development, quick debugging, tail -f monitoring
# Example: 192.168.1.100 [28/Jun/2025:10:30:45] "GET /index.html" 200 "https://example.com"
log_format pretty '$remote_addr [$time_local] "$request" $status "$http_referer"';

# =============================================================================
# CLOUDFLARE LOGGING
# =============================================================================

# Cloudflare-aware format with real client IP
# Use for: Sites behind Cloudflare, shows real visitor IPs
# Example: 203.0.113.1 (via 192.168.1.100) [28/Jun/2025:10:30:45] "GET /index.html" 200 US 7f2a3b4c5d6e7f8g "https://example.com"
log_format cloudflare '$http_cf_connecting_ip ($remote_addr) [$time_local] '
                      '"$request" $status $http_cf_ipcountry '
                      '$http_cf_ray "$http_referer" "$http_user_agent"';

# Comprehensive Cloudflare format with all CF headers
# Use for: Detailed Cloudflare analysis, security monitoring
# Example: 203.0.113.1 - - [28/Jun/2025:10:30:45] "GET /index.html" 200 1234 "https://example.com" "Mozilla/5.0..." ray=7f2a3b4c5d6e7f8g country=US visitor={"scheme":"https"} cache=HIT
log_format cloudflare_full '$http_cf_connecting_ip - $remote_user [$time_local] '
                           '"$request" $status $body_bytes_sent '
                           '"$http_referer" "$http_user_agent" '
                           'ray=$http_cf_ray country=$http_cf_ipcountry '
                           'visitor=$http_cf_visitor cache=$http_cf_cache_status';

# =============================================================================
# SPLUNK LOGGING
# =============================================================================

# Splunk-optimized format with key-value pairs
# Use for: Splunk ingestion, structured logging, enterprise monitoring
# Example: host=example.com src_ip=192.168.1.100 method=GET uri="/index.html" status=200 bytes=1234 response_time=0.123 user_agent="Mozilla/5.0..." referer="https://example.com"
log_format splunk 'host=$server_name src_ip=$remote_addr method=$request_method '
                  'uri="$uri" status=$status bytes=$body_bytes_sent '
                  'response_time=$request_time user_agent="$http_user_agent" '
                  'referer="$http_referer" x_forwarded_for="$http_x_forwarded_for" '
                  'upstream_addr="$upstream_addr" upstream_time="$upstream_response_time"';

# =============================================================================
# ELK STACK (ELASTICSEARCH/LOGSTASH/KIBANA) LOGGING
# =============================================================================

# JSON format optimized for ELK stack or BetterStack
# Use for: Elasticsearch ingestion, Kibana dashboards, log analysis
# Example: {"timestamp":"2025-06-28T10:30:45+00:00","remote_addr":"192.168.1.100","method":"GET","uri":"/index.html","status":200,"bytes_sent":1234,"response_time":0.123,"user_agent":"Mozilla/5.0...","referer":"https://example.com"}
log_format elk_json escape=json '{'
    '"timestamp":"$time_iso8601",'
    '"remote_addr":"$remote_addr",'
    '"remote_user":"$remote_user",'
    '"method":"$request_method",'
    '"uri":"$uri",'
    '"args":"$args",'
    '"status":$status,'
    '"bytes_sent":$body_bytes_sent,'
    '"response_time":$request_time,'
    '"user_agent":"$http_user_agent",'
    '"referer":"$http_referer",'
    '"x_forwarded_for":"$http_x_forwarded_for",'
    '"host":"$http_host",'
    '"server_name":"$server_name",'
    '"request_id":"$request_id",'
    '"upstream_addr":"$upstream_addr",'
    '"upstream_response_time":"$upstream_response_time",'
    '"upstream_cache_status":"$upstream_cache_status",'
    '"ssl_protocol":"$ssl_protocol",'
    '"ssl_cipher":"$ssl_cipher"'
'}';

# Comprehensive JSON format for detailed analysis
# Use for: Advanced analytics, security monitoring, performance analysis
log_format elk_detailed escape=json '{'
    '"@timestamp":"$time_iso8601",'
    '"nginx":{'
        '"access":{'
            '"remote_addr":"$remote_addr",'
            '"remote_user":"$remote_user",'
            '"time_local":"$time_local",'
            '"request":"$request",'
            '"method":"$request_method",'
            '"uri":"$uri",'
            '"args":"$args",'
            '"status":$status,'
            '"bytes_sent":$body_bytes_sent,'
            '"body_bytes_sent":$body_bytes_sent,'
            '"request_time":$request_time,'
            '"request_length":$request_length,'
            '"request_id":"$request_id",'
            '"connection":$connection,'
            '"connection_requests":$connection_requests'
        '},'
        '"http":{'
            '"user_agent":"$http_user_agent",'
            '"referer":"$http_referer",'
            '"x_forwarded_for":"$http_x_forwarded_for",'
            '"host":"$http_host",'
            '"x_real_ip":"$http_x_real_ip"'
        '},'
        '"upstream":{'
            '"addr":"$upstream_addr",'
            '"status":"$upstream_status",'
            '"response_time":"$upstream_response_time",'
            '"response_length":"$upstream_response_length",'
            '"cache_status":"$upstream_cache_status"'
        '},'
        '"ssl":{'
            '"protocol":"$ssl_protocol",'
            '"cipher":"$ssl_cipher"'
        '},'
        '"server":{'
            '"name":"$server_name",'
            '"protocol":"$server_protocol",'
            '"port":"$server_port"'
        '}'
    '}'
'}';

# =============================================================================
# SPECIALIZED FORMATS
# =============================================================================

# Security-focused format for monitoring attacks
# Use for: Security analysis, intrusion detection, fail2ban
# Example: 192.168.1.100 [28/Jun/2025:10:30:45] "GET /admin/login.php" 404 0.001 "https://evil.com" "BadBot/1.0" XFF="-"
log_format security '$remote_addr [$time_local] "$request" $status $request_time '
                   '"$http_referer" "$http_user_agent" XFF="$http_x_forwarded_for"';

# Performance monitoring format
# Use for: Performance analysis, slow request detection
# Example: example.com 192.168.1.100 "GET /api/slow" 200 2.345 upstream=10.0.0.1:8080 upstream_time=2.123 cache=MISS
log_format performance '$server_name $remote_addr "$request" $status $request_time '
                      'upstream=$upstream_addr upstream_time=$upstream_response_time '
                      'cache=$upstream_cache_status';

# API-specific format with detailed request info
# Use for: API monitoring, rate limiting analysis, debugging
# Example: api.example.com POST /v1/users 201 1234 0.456 "application/json" key=abc123 rate_limit=100/hour
log_format api '$server_name $request_method $uri $status $body_bytes_sent '
              '$request_time "$sent_http_content_type" '
              'key=$http_authorization rate_limit=$sent_http_x_ratelimit_remaining';

# Debug format with request body (use carefully - can log sensitive data)
# Use for: API debugging, troubleshooting POST/PUT requests
# WARNING: May log sensitive data - use only in development
log_format debug '$remote_addr [$time_local] "$request" $status $request_time '
                '"$http_user_agent" Body:"$request_body"';
