# =============================================================================
# NGINX CORE SECURITY CONFIGURATION
# =============================================================================
# Essential security settings applied globally across all server blocks
# For additional security headers, include snippets/security-headers.conf in server blocks

# =============================================================================
# SERVER TOKEN SECURITY
# =============================================================================

# Hide nginx version information in error pages and response headers
# Why: Prevents attackers from knowing exact nginx version for targeted exploits
# Impact: Reduces information disclosure and attack surface
# Security: Essential for production environments
server_tokens off;

# =============================================================================
# REQUEST SIZE LIMITS
# =============================================================================

# Limit maximum client request body size to prevent DoS attacks
# Why: Prevents large file upload attacks that could exhaust disk space
# Impact: Protects against resource exhaustion attacks
# Adjust: Based on your application's legitimate file upload needs
client_max_body_size 10m;

# Limit client request header size to prevent buffer overflow attacks
# Why: Prevents oversized header attacks and memory exhaustion
# Impact: Protects against header-based DoS attacks
# Default: 1k is sufficient for most applications
client_header_buffer_size 1k;

# Limit number and size of large client headers
# Why: Prevents clients from sending excessive headers to exhaust memory
# Impact: Protects against header flooding attacks
# Format: number size (e.g., 4 8k = 4 buffers of 8k each)
large_client_header_buffers 4 8k;

# =============================================================================
# FILE ACCESS PROTECTION
# =============================================================================

# Deny access to hidden files (except .well-known for ACME challenges)
# Why: Hidden files often contain sensitive configuration or system data
# Impact: Prevents access to .htaccess, .env, .git, and other sensitive files
# Exception: .well-known is allowed for Let's Encrypt certificate validation
location ~ /\.(?!well-known) {
    deny all;
    access_log off;
    log_not_found off;
}

# Deny access to backup and temporary files
# Why: These files may contain sensitive data or source code
# Impact: Prevents access to editor backups and temporary files
# Pattern: Matches files ending with ~ (vim backups) and common backup extensions
location ~ ~$ {
    deny all;
    access_log off;
    log_not_found off;
}

# Deny access to version control and sensitive directories
# Why: These directories contain source code, history, and configuration
# Impact: Prevents access to .git, .svn, node_modules, and other sensitive dirs
# Security: Critical for preventing source code disclosure
location ~ /\.(git|svn|hg|bzr)|/(node_modules|vendor)/ {
    deny all;
    access_log off;
    log_not_found off;
}

# =============================================================================
# PROTOCOL SECURITY
# =============================================================================

# Disable HTTP methods that are not needed
# Why: Reduces attack surface by blocking potentially dangerous methods
# Impact: Prevents TRACE, DELETE, PUT attacks while allowing standard methods
# Customize: Add/remove methods based on your application needs
if ($request_method !~ ^(GET|HEAD|POST|PUT|DELETE|OPTIONS)$ ) {
    return 405;
}

# =============================================================================
# BUFFER OVERFLOW PROTECTION
# =============================================================================

# Set buffer size for client request body
# Why: Prevents memory exhaustion from large request bodies
# Impact: Limits memory usage per connection for request processing
# Balance: Large enough for legitimate requests, small enough to prevent abuse
client_body_buffer_size 128k;

# Timeout for reading client request body
# Why: Prevents slow POST attacks that tie up connections
# Impact: Limits time spent waiting for request body data
# Security: Protects against slowloris-style attacks
client_body_timeout 12s;

# Timeout for reading client request headers
# Why: Prevents slow header attacks that consume connection pools
# Impact: Limits time spent waiting for complete headers
# Security: Essential protection against slow HTTP attacks
client_header_timeout 12s;

# =============================================================================
# ADDITIONAL SECURITY MEASURES
# =============================================================================

# Limit server name hash bucket size to prevent hash collision attacks
# Why: Prevents attackers from crafting server names to cause hash collisions
# Impact: Protects against server name-based DoS attacks
# Default: Usually sufficient, increase only if you have many server names
server_names_hash_bucket_size 64;

# Disable automatic index generation for directories without index files
# Why: Prevents directory listing that could expose sensitive files
# Impact: Returns 403 instead of showing directory contents
# Security: Prevents information disclosure through directory browsing
autoindex off;
