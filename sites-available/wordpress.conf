# WORDPRESS OPTIMIZED CONFIGURATION
# High-performance WordPress configuration with security hardening
# Optimized for WordPress with PHP-FPM, caching, and security best practices
# Features:
# Replace 'your-wordpress-site.com' with your actual domain

# PHP-FPM upstream configuration
upstream php_fpm {
    server unix:/var/run/php/php8.2-fpm.sock;
    # Alternative TCP socket configuration:
    # server 127.0.0.1:9000;
    
    # Connection optimization
    keepalive 32;
}

# HTTP to HTTPS redirect
server {
    listen                  80;
    listen                  [::]:80;
    server_name             your-wordpress-site.com www.your-wordpress-site.com;

    # Allow ACME challenge for Let's Encrypt
    include                 snippets/letsencrypt.conf;

    # Redirect all HTTP traffic to HTTPS
    location / {
        return              301 https://$server_name$request_uri;
    }
}

# Main HTTPS server for WordPress
server {
    listen                  443 ssl;
    listen                  [::]:443 ssl;
    listen                  443 quic reuseport;
    listen                  [::]:443 quic reuseport;
    http2                   on;
    http3                   on;
    add_header              Alt-Svc 'h3=":443"; ma=86400' always;
    server_name             your-wordpress-site.com www.your-wordpress-site.com;

    # SSL Configuration
    ssl_certificate         /etc/letsencrypt/live/your-wordpress-site.com/fullchain.pem;
    ssl_certificate_key     /etc/letsencrypt/live/your-wordpress-site.com/privkey.pem;
    ssl_trusted_certificate /etc/letsencrypt/live/your-wordpress-site.com/chain.pem;

    # Include security and performance configs
    include                 conf.d/tls-intermediate.conf;
    include                 snippets/security-headers.conf;
    include                 conf.d/performance.conf;

    # WordPress document root
    root                    /var/www/your-wordpress-site.com;
    index                   index.php index.html index.htm;

    # Rate limiting for login attempts
    limit_req               zone=general burst=20 nodelay;

    #
    # WORDPRESS SECURITY RULES
    #

    # Block access to sensitive WordPress files
    location ~ /\.(htaccess|htpasswd|ini|log|sh|inc|bak)$ {
        deny                all;
        access_log          off;
        log_not_found       off;
    }

    # Block access to WordPress config and sensitive directories
    location ~ ^/(wp-config\.php|wp-config-sample\.php|readme\.html|license\.txt)$ {
        deny                all;
        access_log          off;
        log_not_found       off;
    }

    # Protect wp-includes directory
    location ~ ^/wp-includes/.*\.php$ {
        deny                all;
        access_log          off;
        log_not_found       off;
    }

    # Block access to wp-content/uploads PHP files
    location ~* ^/wp-content/uploads/.*\.(php|php5|phtml|pl|py|jsp|asp|sh|cgi)$ {
        deny                all;
        access_log          off;
        log_not_found       off;
    }

    # Protect WordPress admin with rate limiting
    location ~ ^/(wp-admin|wp-login\.php) {
        # Stricter rate limiting for admin area
        limit_req           zone=api burst=5 nodelay;
        
        # Optional: Restrict admin access by IP
        # allow               192.168.1.0/24;
        # allow               10.0.0.0/8;
        # deny                all;
        
        # Process PHP files
        location ~ \.php$ {
            include         snippets/fastcgi-php.conf;
            fastcgi_pass    php_fpm;
            fastcgi_param   SCRIPT_FILENAME $document_root$fastcgi_script_name;
            include         fastcgi_params;
            
            # Security headers for admin
            add_header      X-Frame-Options SAMEORIGIN;
            add_header      X-Content-Type-Options nosniff;
            add_header      Referrer-Policy strict-origin-when-cross-origin;
        }
        
        try_files           $uri $uri/ /index.php?$args;
    }

    #
    # WORDPRESS PERFORMANCE OPTIMIZATION
    #

    # Cache static assets aggressively
    location ~* \.(css|js|jpg|jpeg|png|gif|ico|svg|woff|woff2|ttf|eot|webp|avif|pdf)$ {
        expires             1y;
        add_header          Cache-Control "public, immutable";
        add_header          Vary "Accept-Encoding";
        
        # Enable compression
        gzip_static         on;
        brotli_static       on;
        
        # Security headers
        add_header          X-Content-Type-Options nosniff;
        
        # Disable access logging for assets
        access_log          off;
        
        # Handle missing assets gracefully
        try_files           $uri =404;
    }

    # WordPress uploads directory
    location ~* ^/wp-content/uploads/ {
        expires             1M;
        add_header          Cache-Control "public";
        add_header          Vary "Accept-Encoding";
        access_log          off;
        
        # Block PHP execution in uploads
        location ~ \.php$ {
            deny            all;
        }
        
        try_files           $uri =404;
    }

    # WordPress themes and plugins assets
    location ~* ^/wp-content/(themes|plugins)/.+\.(css|js|jpg|jpeg|png|gif|ico|svg|woff|woff2|ttf|eot)$ {
        expires             1M;
        add_header          Cache-Control "public";
        add_header          Vary "Accept-Encoding";
        access_log          off;
        try_files           $uri =404;
    }

    #
    # WORDPRESS CORE FUNCTIONALITY
    #

    # WordPress main entry point
    location / {
        # Try to serve request as file, then as directory, then fall back to WordPress
        try_files           $uri $uri/ /index.php?$args;
        
        # Cache control for HTML pages
        expires             1h;
        add_header          Cache-Control "public, must-revalidate";
    }

    # Process PHP files
    location ~ \.php$ {
        # Security check - only allow PHP files that exist
        try_files           $uri =404;
        
        # FastCGI configuration
        include             snippets/fastcgi-php.conf;
        fastcgi_pass        php_fpm;
        fastcgi_param       SCRIPT_FILENAME $document_root$fastcgi_script_name;
        include             fastcgi_params;
        
        # WordPress-specific FastCGI parameters
        fastcgi_param       HTTP_PROXY "";
        fastcgi_param       HTTPS $https if_not_empty;
        
        # Performance settings
        fastcgi_connect_timeout 60s;
        fastcgi_send_timeout 60s;
        fastcgi_read_timeout 60s;
        fastcgi_buffer_size 128k;
        fastcgi_buffers 256 16k;
        fastcgi_busy_buffers_size 256k;
        fastcgi_temp_file_write_size 256k;
        
        # Handle large uploads
        client_max_body_size 100M;
        client_body_timeout 60s;
    }

    #
    # WORDPRESS SPECIFIC ENDPOINTS
    #

    # WordPress XML-RPC (disable if not needed)
    location = /xmlrpc.php {
        # Uncomment to disable XML-RPC completely
        # deny                all;
        # access_log          off;
        # log_not_found       off;
        
        # Or rate limit XML-RPC requests
        limit_req           zone=api burst=2 nodelay;
        include             snippets/fastcgi-php.conf;
        fastcgi_pass        php_fpm;
        fastcgi_param       SCRIPT_FILENAME $document_root$fastcgi_script_name;
        include             fastcgi_params;
    }

    # WordPress feeds
    location ~* ^/(feed|rdf|rss|rss2|atom)/?$ {
        expires             1h;
        add_header          Cache-Control "public";
        try_files           $uri $uri/ /index.php?$args;
    }

    # WordPress sitemap
    location ~* ^/(sitemap|sitemap\.xml|sitemap_index\.xml)$ {
        expires             1d;
        add_header          Cache-Control "public";
        try_files           $uri $uri/ /index.php?$args;
    }

    #
    # WOOCOMMERCE OPTIMIZATION (OPTIONAL)
    #

    # Uncomment if using WooCommerce
    # WooCommerce checkout and account pages (no cache)
    # location ~* ^/(checkout|cart|my-account|wc-api)/ {
    #     expires             -1;
    #     add_header          Cache-Control "no-cache, no-store, must-revalidate";
    #     add_header          Pragma "no-cache";
    #     try_files           $uri $uri/ /index.php?$args;
    # }

    #
    # WORDPRESS MULTISITE SUPPORT (OPTIONAL)
    #

    # Uncomment for WordPress Multisite subdirectory setup
    # if (!-e $request_filename) {
    #     rewrite             /wp-admin$ $scheme://$host$uri/ permanent;
    #     rewrite             ^/[_0-9a-zA-Z-]+(/wp-.*) $1 last;
    #     rewrite             ^/[_0-9a-zA-Z-]+(/.*\.php)$ $1 last;
    # }

    #
    # MONITORING AND MAINTENANCE
    #

    # WordPress health check
    location = /wp-health {
        access_log          off;
        return              200 "WordPress OK\n";
        add_header          Content-Type text/plain;
    }

    # PHP-FPM status (restrict access)
    location ~ ^/(status|ping)$ {
        access_log          off;
        allow               127.0.0.1;
        allow               ::1;
        deny                all;
        include             snippets/fastcgi-php.conf;
        fastcgi_pass        php_fpm;
        fastcgi_param       SCRIPT_FILENAME $document_root$fastcgi_script_name;
        include             fastcgi_params;
    }

    #
    # ERROR HANDLING
    #

    # Custom error pages
    error_page 404 /404.php;
    error_page 500 502 503 504 /50x.html;
    
    location = /50x.html {
        root                /var/www/error-pages;
        internal;
    }
}

# USAGE INSTRUCTIONS
# PHP-FPM OPTIMIZATION:
