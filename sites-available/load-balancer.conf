# LOAD BALANCER CONFIGURATION EXAMPLE
# High-availability load balancer configuration for multiple backend servers
# Distributes traffic across multiple application instances with health monitoring
# Features:
# Replace 'your-load-balanced-app.com' with your actual domain

# LOAD BALANCER UPSTREAM DEFINITIONS

# Primary application servers with load balancing
upstream app_servers {
    # Load balancing method (choose one):
    # least_conn;          # Route to server with least active connections
    # ip_hash;             # Session persistence based on client IP
    # hash $request_uri;   # Route based on request URI
    # random;              # Random distribution
    # Default: round_robin (no directive needed)
    
    least_conn;  # Best for long-lived connections
    
    # Primary application servers with weights
    server 10.0.1.10:8000 weight=3 max_fails=3 fail_timeout=30s;
    server 10.0.1.11:8000 weight=3 max_fails=3 fail_timeout=30s;
    server 10.0.1.12:8000 weight=2 max_fails=3 fail_timeout=30s;
    
    # Backup servers (only used when primary servers are down)
    server 10.0.1.20:8000 backup weight=1 max_fails=2 fail_timeout=60s;
    server 10.0.1.21:8000 backup weight=1 max_fails=2 fail_timeout=60s;
    
    # Connection optimization
    keepalive 64;
    keepalive_requests 1000;
    keepalive_timeout 60s;
    
    # Health check configuration (nginx plus feature)
    # For open source nginx, use external health check tools
    # health_check interval=30s fails=3 passes=2 uri=/health;
}

# Database read replicas for read-heavy operations
upstream db_read_replicas {
    least_conn;
    
    server 10.0.2.10:5432 weight=2 max_fails=2 fail_timeout=30s;
    server 10.0.2.11:5432 weight=2 max_fails=2 fail_timeout=30s;
    server 10.0.2.12:5432 weight=1 max_fails=2 fail_timeout=30s;
    
    keepalive 32;
}

# API gateway servers
upstream api_gateway {
    ip_hash;  # Session persistence for API keys/tokens
    
    server 10.0.3.10:3000 max_fails=3 fail_timeout=30s;
    server 10.0.3.11:3000 max_fails=3 fail_timeout=30s;
    server 10.0.3.12:3000 ;
    
    keepalive 32;
}

# Static content servers (CDN origin)
upstream static_servers {
    server 10.0.4.10:80 weight=3;
    server 10.0.4.11:80 weight=3;
    server 10.0.4.12:80 weight=2;
    
    keepalive 16;
}

# HTTP to HTTPS redirect
server {
    listen                  80;
    listen                  [::]:80;
    server_name             your-load-balanced-app.com *.your-load-balanced-app.com;

    # Allow ACME challenge for Let's Encrypt
    include                 snippets/letsencrypt.conf;

    # Redirect all HTTP traffic to HTTPS
    location / {
        return              301 https://$server_name$request_uri;
    }
}

# Main HTTPS server with load balancing
server {
    listen                  443 ssl;
    listen                  [::]:443 ssl;
    listen                  443 quic reuseport;
    listen                  [::]:443 quic reuseport;
    http2                   on;
    http3                   on;
    add_header              Alt-Svc 'h3=":443"; ma=86400' always;
    server_name             your-load-balanced-app.com;

    # SSL Configuration
    ssl_certificate         /etc/letsencrypt/live/your-load-balanced-app.com/fullchain.pem;
    ssl_certificate_key     /etc/letsencrypt/live/your-load-balanced-app.com/privkey.pem;
    ssl_trusted_certificate /etc/letsencrypt/live/your-load-balanced-app.com/chain.pem;

    # Include security and performance configs
    include                 conf.d/tls-intermediate.conf;
    include                 snippets/security-headers.conf;
    include                 conf.d/performance.conf;

    # Rate limiting
    limit_req               zone=general burst=50 nodelay;

    #
    # LOAD BALANCED APPLICATION
    #

    # Main application with load balancing
    location / {
        proxy_pass          http://app_servers;
        # Standard proxy headers
        include             snippets/proxy-headers.conf;
        
        # Load balancer specific headers
        proxy_set_header    X-Load-Balancer "nginx";
        proxy_set_header    X-Upstream-Server $upstream_addr;
        proxy_set_header    X-Response-Time $upstream_response_time;
        
        # Failover configuration
        proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
        proxy_next_upstream_tries 3;
        proxy_next_upstream_timeout 10s;
        
        # Connection settings
        proxy_connect_timeout 10s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
        
        # Handle large uploads
        client_max_body_size 100M;
        proxy_request_buffering off;
    }

    #
    # API ENDPOINTS WITH DEDICATED LOAD BALANCING
    #

    # API routes with session persistence
    location /api/ {
        # API-specific rate limiting
        limit_req           zone=api burst=20 nodelay;
        
        proxy_pass          http://api_gateway;
        include             conf.d/proxy.conf;
        
        # API-specific headers
        proxy_set_header    X-Request-ID $request_id;
        proxy_set_header    X-API-Gateway $upstream_addr;
        proxy_set_header    X-Load-Balancer "nginx-api";
        
        # CORS for API
        add_header          Access-Control-Allow-Origin $http_origin always;
        add_header          Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
        add_header          Access-Control-Allow-Headers "Authorization, Content-Type, X-Requested-With" always;
        add_header          Access-Control-Allow-Credentials true always;
        
        # Handle preflight requests
        if ($request_method = OPTIONS) {
            add_header      Access-Control-Max-Age 86400;
            add_header      Content-Length 0;
            add_header      Content-Type text/plain;
            return          204;
        }
        
        # API failover
        proxy_next_upstream error timeout http_500 http_502 http_503 http_504;
        proxy_next_upstream_tries 2;
        proxy_next_upstream_timeout 5s;
    }

    #
    # STATIC CONTENT WITH CDN ORIGIN LOAD BALANCING
    #

    # Static assets served from multiple origin servers
    location /static/ {
        proxy_pass          http://static_servers;
        
        # Static content headers
        include             snippets/proxy-headers.conf;
        proxy_set_header    X-Static-Server $upstream_addr;
        
        # Caching for static content
        expires             1y;
        add_header          Cache-Control "public, immutable";
        add_header          Vary "Accept-Encoding";
        
        # Static content failover
        proxy_next_upstream error timeout http_404 http_500 http_502 http_503 http_504;
        proxy_next_upstream_tries 2;
        proxy_next_upstream_timeout 3s;
        
        # Disable access logging for static assets
        access_log          off;
    }

    #
    # WEBSOCKET LOAD BALANCING WITH SESSION PERSISTENCE
    #

    # WebSocket connections with sticky sessions
    location /ws/ {
        # Use ip_hash for WebSocket session persistence
        proxy_pass          http://app_servers;
        
        # Essential WebSocket headers
        proxy_set_header    Upgrade $http_upgrade;
        proxy_set_header    Connection $connection_upgrade;
        
        # Standard proxy headers
        include             snippets/proxy-headers.conf;
        proxy_set_header    X-Forwarded-Host $host;
        proxy_set_header    X-Request-ID $request_id;
        
        access_log          off;
        
        # Quick health check timeouts
        proxy_connect_timeout 3s;
        proxy_send_timeout 3s;
        proxy_read_timeout 3s;
        
        # Add load balancer info
        add_header          X-Load-Balancer "nginx";
        add_header          X-Health-Check "pass";
    }

    # Individual server health checks
    location /health/server1 {
        proxy_pass          http://10.0.1.10:8000/health;
        include             conf.d/proxy.conf;
        access_log          off;
        add_header          X-Server "server1";
    }

    location /health/server2 {
        proxy_pass          http://10.0.1.11:8000/health;
        include             conf.d/proxy.conf;
        access_log          off;
        add_header          X-Server "server2";
    }

    # Load balancer status and metrics
    location /lb-status {
        stub_status         on;
        access_log          off;
        
        # Restrict access to monitoring systems
        allow               10.0.0.0/8;
        allow               192.168.0.0/16;
        allow               127.0.0.1;
        deny                all;
        
        add_header          Content-Type text/plain;
    }

    #
    # MAINTENANCE MODE
    #

    # Maintenance mode toggle
    location /maintenance {
        # Check for maintenance file
        if (-f /var/www/maintenance.html) {
            return          503;
        }
        
        proxy_pass          http://app_servers;
        include             conf.d/proxy.conf;
    }

    # Custom 503 error page for maintenance
    error_page 503 @maintenance;
    location @maintenance {
        root                /var/www;
        try_files           /maintenance.html =503;
        add_header          Retry-After 3600;
        add_header          Cache-Control "no-cache, no-store, must-revalidate";
    }
}

# ADMIN SUBDOMAIN FOR LOAD BALANCER MANAGEMENT

server {
    listen                  443 ssl;
    listen                  [::]:443 ssl;
    server_name             admin.your-load-balanced-app.com;

    # SSL Configuration
    ssl_certificate         /etc/letsencrypt/live/your-load-balanced-app.com/fullchain.pem;
    ssl_certificate_key     /etc/letsencrypt/live/your-load-balanced-app.com/privkey.pem;
    ssl_trusted_certificate /etc/letsencrypt/live/your-load-balanced-app.com/chain.pem;

    include                 conf.d/tls-intermediate.conf;
    include                 snippets/security-headers.conf;

    # Restrict access to admin interface
    allow                   10.0.0.0/8;
    allow                   192.168.0.0/16;
    deny                    all;

    # Load balancer administration interface
    location / {
        root                /var/www/lb-admin;
        index               index.html;
        
        # Enhanced security for admin
        add_header          X-Frame-Options DENY;
        add_header          X-Content-Type-Options nosniff;
        add_header          Referrer-Policy strict-origin-when-cross-origin;
    }

    # Real-time server status API
    location /api/servers {
        # Custom script to check server status
        proxy_pass          http://127.0.0.1:8080/server-status;
        include             conf.d/proxy.conf;
    }

    # Nginx status with detailed metrics
    location /nginx-status {
        stub_status         on;
        access_log          off;
    }
}

# USAGE INSTRUCTIONS
# 10. Reload nginx: systemctl reload nginx
