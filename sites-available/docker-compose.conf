# DOCKER COMPOSE SERVICES CONFIGURATION
# Nginx configuration for Docker Compose environments
# Routes traffic to containerized services with service discovery
# Features:
# Replace 'your-docker-app.com' with your actual domain

# DOCKER SERVICES UPSTREAM DEFINITIONS

# Frontend application (React/Vue/Angular)
upstream frontend_app {
    # Docker service name resolution
    server frontend:3000;
    # Alternative: Use Docker Compose service scaling
    # server frontend_1:3000;
    # server frontend_2:3000;
    
    # Connection optimization
    keepalive 32;
    keepalive_requests 1000;
    keepalive_timeout 60s;
}

# Backend API service
upstream backend_api {
    server backend:8000;
    # Scaled backend services
    # server backend_1:8000;
    # server backend_2:8000;
    
    keepalive 32;
}

# Database admin interface (phpMyAdmin, Adminer, etc.)
upstream db_admin {
    server db-admin:80;
    keepalive 16;
}

# Redis admin interface (RedisInsight, redis-commander)
upstream redis_admin {
    server redis-admin:8081;
    keepalive 16;
}

# Monitoring services (Grafana, Prometheus)
upstream monitoring {
    server grafana:3000;
    keepalive 16;
}

# Message queue admin (RabbitMQ Management, Kafka UI)
upstream queue_admin {
    server rabbitmq:15672;
    keepalive 16;
}

# HTTP to HTTPS redirect
server {
    listen                  80;
    listen                  [::]:80;
    server_name             your-docker-app.com *.your-docker-app.com;

    # Allow ACME challenge for Let's Encrypt
    include                 snippets/letsencrypt.conf;

    # Redirect all HTTP traffic to HTTPS
    location / {
        return              301 https://$server_name$request_uri;
    }
}

# Main HTTPS server for Docker services
server {
    listen                  443 ssl;
    listen                  [::]:443 ssl;
    listen                  443 quic reuseport;
    listen                  [::]:443 quic reuseport;
    http2                   on;
    http3                   on;
    add_header              Alt-Svc 'h3=":443"; ma=86400' always;
    server_name             your-docker-app.com;

    # SSL Configuration
    ssl_certificate         /etc/letsencrypt/live/your-docker-app.com/fullchain.pem;
    ssl_certificate_key     /etc/letsencrypt/live/your-docker-app.com/privkey.pem;
    ssl_trusted_certificate /etc/letsencrypt/live/your-docker-app.com/chain.pem;

    # Include security and performance configs
    include                 conf.d/tls-intermediate.conf;
    include                 snippets/security-headers.conf;
    include                 conf.d/performance.conf;

    # Rate limiting
    limit_req               zone=general burst=20 nodelay;

    #
    # FRONTEND APPLICATION
    #

    # Serve frontend application (SPA)
    location / {
        proxy_pass          http://frontend_app;
        include             conf.d/proxy.conf;
        
        # Container-specific headers
        proxy_set_header    X-Request-ID $request_id;
        proxy_set_header    X-Container-Service "frontend";
        
        # Handle SPA routing
        proxy_intercept_errors on;
        error_page 404 = @fallback;
    }

    # SPA fallback for client-side routing
    location @fallback {
        proxy_pass          http://frontend_app/;
        include             conf.d/proxy.conf;
    }

    #
    # BACKEND API SERVICES
    #

    # API endpoints
    location /api/ {
        # API rate limiting
        limit_req           zone=api burst=10 nodelay;
        
        proxy_pass          http://backend_api;
        include             conf.d/proxy.conf;
        
        # API-specific headers
        proxy_set_header    X-Request-ID $request_id;
        proxy_set_header    X-Container-Service "backend";
        proxy_set_header    X-API-Version "v1";
        
        # CORS for API
        add_header          Access-Control-Allow-Origin $http_origin always;
        add_header          Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
        add_header          Access-Control-Allow-Headers "Authorization, Content-Type, X-Requested-With" always;
        add_header          Access-Control-Allow-Credentials true always;
        
        # Handle preflight requests
        if ($request_method = OPTIONS) {
            add_header      Access-Control-Max-Age 86400;
            add_header      Content-Length 0;
            add_header      Content-Type text/plain;
            return          204;
        }
    }

    #
    # WEBSOCKET SUPPORT
    #

    # WebSocket connections for real-time features
    location /ws/ {
        proxy_pass          http://backend_api;
        
        # Essential WebSocket headers
        proxy_set_header    Upgrade $http_upgrade;
        proxy_set_header    Connection $connection_upgrade;
        
        # Standard proxy headers
        proxy_set_header    Host $host;
        proxy_set_header    X-Real-IP $remote_addr;
        proxy_set_header    X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header    X-Forwarded-Proto $scheme;
        proxy_set_header    X-Container-Service "backend-ws";
        
        # WebSocket timeouts
        proxy_read_timeout  3600s;
        proxy_send_timeout  3600s;
        
        # Disable caching
        proxy_cache_bypass  $http_upgrade;
        proxy_no_cache      $http_upgrade;
    }

    #
    # CONTAINER HEALTH CHECKS
    #

    # Application health check
    location /health {
        proxy_pass          http://backend_api;
        include             conf.d/proxy.conf;
        access_log          off;
        
        # Quick timeout for health checks
        proxy_connect_timeout 5s;
        proxy_send_timeout 5s;
        proxy_read_timeout 5s;
        
        # Add container info
        add_header          X-Container-Service "backend";
    }

    # Frontend health check
    location /health/frontend {
        proxy_pass          http://frontend_app/health;
        include             conf.d/proxy.conf;
        access_log          off;
        
        proxy_connect_timeout 5s;
        proxy_send_timeout 5s;
        proxy_read_timeout 5s;
        
        add_header          X-Container-Service "frontend";
    }
}

# ADMIN SUBDOMAINS FOR DOCKER SERVICES

# Database administration interface
server {
    listen                  443 ssl;
    listen                  [::]:443 ssl;
    server_name             db.your-docker-app.com;

    # SSL Configuration (use wildcard or separate cert)
    ssl_certificate         /etc/letsencrypt/live/your-docker-app.com/fullchain.pem;
    ssl_certificate_key     /etc/letsencrypt/live/your-docker-app.com/privkey.pem;
    ssl_trusted_certificate /etc/letsencrypt/live/your-docker-app.com/chain.pem;

    include                 conf.d/tls-intermediate.conf;
    include                 snippets/security-headers.conf;

    # Restrict access to admin interfaces
    # allow                   192.168.0.0/16;
    # allow                   10.0.0.0/8;
    # deny                    all;

    location / {
        proxy_pass          http://db_admin;
        include             conf.d/proxy.conf;
        
        proxy_set_header    X-Container-Service "db-admin";
        
        # Enhanced security for admin interface
        add_header          X-Frame-Options DENY;
        add_header          X-Content-Type-Options nosniff;
        add_header          Referrer-Policy strict-origin-when-cross-origin;
    }
}

# Redis administration interface
server {
    listen                  443 ssl;
    listen                  [::]:443 ssl;
    server_name             redis.your-docker-app.com;

    ssl_certificate         /etc/letsencrypt/live/your-docker-app.com/fullchain.pem;
    ssl_certificate_key     /etc/letsencrypt/live/your-docker-app.com/privkey.pem;
    ssl_trusted_certificate /etc/letsencrypt/live/your-docker-app.com/chain.pem;

    include                 conf.d/tls-intermediate.conf;
    include                 snippets/security-headers.conf;

    # Restrict access
    # allow                   192.168.0.0/16;
    # deny                    all;

    location / {
        proxy_pass          http://redis_admin;
        include             conf.d/proxy.conf;
        proxy_set_header    X-Container-Service "redis-admin";
    }
}

# Monitoring dashboard (Grafana)
server {
    listen                  443 ssl;
    listen                  [::]:443 ssl;
    server_name             monitoring.your-docker-app.com;

    ssl_certificate         /etc/letsencrypt/live/your-docker-app.com/fullchain.pem;
    ssl_certificate_key     /etc/letsencrypt/live/your-docker-app.com/privkey.pem;
    ssl_trusted_certificate /etc/letsencrypt/live/your-docker-app.com/chain.pem;

    include                 conf.d/tls-intermediate.conf;
    include                 snippets/security-headers.conf;

    location / {
        proxy_pass          http://monitoring;
        include             conf.d/proxy.conf;
        proxy_set_header    X-Container-Service "monitoring";
        
        # WebSocket support for Grafana live features
        proxy_set_header    Upgrade $http_upgrade;
        proxy_set_header    Connection $connection_upgrade;
    }
}

# Message queue administration
server {
    listen                  443 ssl;
    listen                  [::]:443 ssl;
    server_name             queue.your-docker-app.com;

    ssl_certificate         /etc/letsencrypt/live/your-docker-app.com/fullchain.pem;
    ssl_certificate_key     /etc/letsencrypt/live/your-docker-app.com/privkey.pem;
    ssl_trusted_certificate /etc/letsencrypt/live/your-docker-app.com/chain.pem;

    include                 conf.d/tls-intermediate.conf;
    include                 snippets/security-headers.conf;

    location / {
        proxy_pass          http://queue_admin;
        include             conf.d/proxy.conf;
        proxy_set_header    X-Container-Service "queue-admin";
    }
}

# USAGE INSTRUCTIONS
# networks:
#   app-network:
#     driver: bridge
# services:
#   nginx:
#     networks:
#       - app-network
#   frontend:
#     networks:
#       - app-network
#   backend:
#     networks:
#       - app-network
