# NetBox IPAM and DCIM Configuration
# Replace 'netbox.example.com' with your actual domain name
#
# Generate a self-signed certificate for testing:
# sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
#   -keyout /etc/ssl/private/netbox.key \
#   -out /etc/ssl/certs/netbox.crt \
#   -subj "/CN=netbox.example.com"

# HTTP to HTTPS redirect
server {
    listen                  80;
    listen                  [::]:80;
    server_name             netbox.example.com;

    # Allow ACME challenge for Let's Encrypt
    include                 snippets/letsencrypt.conf;

    # Redirect all HTTP traffic to HTTPS
    location / {
        return              301 https://$server_name$request_uri;
    }
}

# Main NetBox HTTPS server
server {
    listen                  443 ssl;
    listen                  [::]:443 ssl;
    server_name             netbox.example.com;

    # SSL Configuration
    # For Let's Encrypt:
    # ssl_certificate         /etc/letsencrypt/live/netbox.example.com/fullchain.pem;
    # ssl_certificate_key     /etc/letsencrypt/live/netbox.example.com/privkey.pem;
    # ssl_trusted_certificate /etc/letsencrypt/live/netbox.example.com/chain.pem;

    # For self-signed certificate:
    ssl_certificate         /etc/ssl/certs/netbox.crt;
    ssl_certificate_key     /etc/ssl/private/netbox.key;

    # Include snippets
    include                 snippets/gzip.conf;

    # Logging
    access_log              /var/log/nginx/netbox.access.log;
    error_log               /var/log/nginx/netbox.error.log warn;

    # Increase client body size for file uploads (device images, etc.)
    client_max_body_size    25M;

    # Minimal security headers for testing
    # For production, uncomment these and add CSP:
    # add_header X-Frame-Options "SAMEORIGIN" always;
    # add_header X-Content-Type-Options "nosniff" always;
    # add_header X-XSS-Protection "1; mode=block" always;
    # add_header Referrer-Policy "strict-origin-when-cross-origin" always;

    # Optional: IP whitelist (uncomment and configure as needed)
    # allow 192.168.1.0/24;    # Local network
    # allow 10.0.0.0/8;        # Private network
    # deny all;

    # Block access to sensitive files
    location ~ /\.(env|htaccess|htpasswd|git) {
        deny all;
        access_log off;
        log_not_found off;
    }

    # Static files served directly from container volume
    # Adjust the path if you mount NetBox static files directly to host
    location /static/ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header Vary "Accept-Encoding";
        access_log off;

        proxy_pass              http://netbox_backend;

        # Standard proxy headers
        include                 snippets/proxy-headers.conf;
    }

    # Media files (uploaded images, attachments)
    location /media/ {
        expires 7d;
        add_header Cache-Control "public";

        proxy_pass              http://netbox_backend;

        # Standard proxy headers
        include                 snippets/proxy-headers.conf;
    }

    # Favicon
    location = /favicon.ico {
        access_log off;
        log_not_found off;
        expires 1y;
        add_header Cache-Control "public, immutable";

        proxy_pass              http://netbox_backend;

        # Standard proxy headers
        include                 snippets/proxy-headers.conf;
    }

    # NetBox API endpoints
    location /api/ {
        # limit_req               zone=api burst=30 nodelay;  # Disabled for testing

        proxy_pass              http://netbox_backend;

        # Standard proxy headers
        include                 snippets/proxy-headers.conf;

        # Extended timeouts for API operations
        proxy_connect_timeout   30s;
        proxy_send_timeout      60s;
        proxy_read_timeout      60s;
    }

    # GraphQL API endpoint
    location /graphql/ {
        # limit_req               zone=api burst=20 nodelay;  # Disabled for testing

        proxy_pass              http://netbox_backend;

        # Standard proxy headers
        include                 snippets/proxy-headers.conf;
    }

    # NetBox login page
    location /login/ {
        # limit_req               zone=general burst=10 nodelay;  # Disabled for testing

        proxy_pass              http://netbox_backend;

        # Standard proxy headers
        include                 snippets/proxy-headers.conf;

        # No caching for login pages
        expires -1;
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        add_header Pragma "no-cache";
    }

    # NetBox logout
    location /logout/ {
        proxy_pass              http://netbox_backend;

        # Standard proxy headers
        include                 snippets/proxy-headers.conf;

        expires -1;
        add_header Cache-Control "no-cache, no-store, must-revalidate";
    }

    # Metrics endpoint (for Prometheus)
    location /metrics {
        # Restrict access to monitoring systems
        allow 127.0.0.1;
        allow ::1;
        # allow 192.168.1.0/24;  # Add your monitoring network
        deny all;

        proxy_pass              http://netbox_backend;

        # Standard proxy headers
        include                 snippets/proxy-headers.conf;

        access_log off;
    }

    # Main NetBox application
    location / {
        # limit_req               zone=general burst=15 nodelay;  # Disabled for testing

        proxy_pass              http://netbox_backend;

        # Standard proxy headers
        include                 snippets/proxy-headers.conf;

        # Custom timeouts
        proxy_connect_timeout   30s;
        proxy_send_timeout      60s;
        proxy_read_timeout      60s;
    }

    # Health check endpoint
    location = /health {
        access_log off;
        add_header Content-Type "application/json" always;
        return 200 '{"status":"healthy","service":"netbox","timestamp":"$time_iso8601"}';
    }

    # Error handling - NetBox handles its own error pages
}

# NetBox backend upstream
# Adjust the port based on your container configuration (commonly 8080 or 8001)
# If you have multiple NetBox instances, rename this upstream to be unique (e.g., netbox_dev_backend)
upstream netbox_backend {
    server 127.0.0.1:8001;
    # server netbox:8001;  # Use this if connecting via Docker network
    keepalive 32;
    keepalive_requests 100;
    keepalive_timeout 60s;
}

# Alternative: Define upstream in a separate file and include it, or use a unique name:
# upstream netbox_example_backend {
#     server 127.0.0.1:8001;
#     keepalive 32;
# }