# Best Practice Site Configuration Example
# This configuration demonstrates modern nginx best practices for hosting a website
# Features included:
# Replace 'example-site.com' with your actual domain name

# HTTP to HTTPS redirect for all subdomains
server {
    listen                  80;
    listen                  [::]:80;
    server_name             example-site.com www.example-site.com api.example-site.com admin.example-site.com;

    # Allow ACME challenge for Let's Encrypt
    include                 snippets/letsencrypt.conf;

    # Redirect all HTTP traffic to HTTPS
    location / {
        return              301 https://$server_name$request_uri;
    }
}

# Main Website (Frontend)
server {
    listen                  443 ssl;
    listen                  [::]:443 ssl;
    listen                  443 quic reuseport;
    listen                  [::]:443 quic reuseport;
    http2                   on;
    http3                   on;
    add_header              Alt-Svc 'h3=":443"; ma=86400' always;
    server_name             example-site.com www.example-site.com;

    # SSL Configuration
    ssl_certificate         /etc/letsencrypt/live/example-site.com/fullchain.pem;
    ssl_certificate_key     /etc/letsencrypt/live/example-site.com/privkey.pem;
    ssl_trusted_certificate /etc/letsencrypt/live/example-site.com/chain.pem;

    # Include security and performance configs
    include                 conf.d/tls-intermediate.conf;
    include                 sites-security/example-site.com.conf;
    include                 conf.d/general.conf;
    include                 conf.d/performance.conf;
    include                 conf.d/cloudflare.conf;

    # Logging
    access_log              /var/log/nginx/example-site.com.access.log;
    error_log               /var/log/nginx/example-site.com.error.log warn;

    # Document root for static files
    root                    /var/www/example-site.com;
    index                   index.html index.htm;

    # Security: Block access to sensitive files
    location ~ /\.(git|svn|env|htaccess|htpasswd) {
        deny all;
        access_log off;
        log_not_found off;
    }

    # Security: Block access to backup and temporary files
    location ~ \.(bak|backup|swp|tmp|temp)$ {
        deny all;
        access_log off;
    }

    # Robots.txt with caching
    location = /robots.txt {
        access_log off;
        log_not_found off;
        expires 1d;
        add_header Cache-Control "public, immutable";
    }

    # Favicon with long-term caching
    location = /favicon.ico {
        access_log off;
        log_not_found off;
        expires 1y;
        add_header Cache-Control "public, immutable";
    }

    # Static assets with aggressive caching
    location ~* \.(css|js|jpg|jpeg|png|gif|ico|svg|woff|woff2|ttf|eot|webp|avif)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header Vary "Accept-Encoding";
        access_log off;
        
        # Enable CORS for fonts and assets
        location ~* \.(woff|woff2|ttf|eot)$ {
            add_header Access-Control-Allow-Origin "*";
            expires 1y;
            add_header Cache-Control "public, immutable";
        }
    }

    # API proxy for backend services (if needed)
    location /api/ {
        limit_req               zone=general burst=20 nodelay;
        
        # Remove /api prefix when forwarding to backend
        rewrite                 ^/api/(.*)$ /$1 break;
        proxy_pass              http://backend_app;
        include                 conf.d/proxy.conf;
        
        # API-specific headers
        proxy_set_header        X-API-Gateway "main-site";
        proxy_set_header        X-Request-ID $request_id;
        
        # CORS for API endpoints
        add_header              Access-Control-Allow-Origin "$http_origin" always;
        add_header              Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
        add_header              Access-Control-Allow-Headers "Authorization, Content-Type, Accept" always;
        add_header              Access-Control-Allow-Credentials "true" always;
        
        # Handle preflight requests
        if ($request_method = 'OPTIONS') {
            add_header Access-Control-Allow-Origin "$http_origin" always;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
            add_header Access-Control-Allow-Headers "Authorization, Content-Type, Accept" always;
            add_header Access-Control-Max-Age "86400" always;
            add_header Content-Length 0;
            return 204;
        }
    }

    # Health check endpoint
    location = /health {
        access_log off;
        add_header Content-Type "application/json" always;
        return 200 '{"status":"healthy","site":"example-site.com","timestamp":"$time_iso8601"}';
    }

    # Main site content
    location / {
        # Try static files first, then fall back to index.html (for SPAs)
        try_files $uri $uri/ /index.html;
        
        # Security headers for HTML pages
        location ~* \.html?$ {
            expires 1h;
            add_header Cache-Control "public, must-revalidate";
            
            # Additional security for HTML
            add_header X-Content-Type-Options "nosniff" always;
            add_header X-Frame-Options "SAMEORIGIN" always;
        }
    }

    # Optional: Proxy to application server (uncomment if needed)
    # location @app {
    #     proxy_pass              http://backend_app;
    #     include                 conf.d/proxy.conf;
    #     proxy_set_header        X-Request-ID $request_id;
    # }
}

# API Subdomain (Backend Services)
server {
    listen                  443 ssl;
    listen                  [::]:443 ssl;
    listen                  443 quic;
    listen                  [::]:443 quic;
    http2                   on;
    http3                   on;
    add_header              Alt-Svc 'h3=":443"; ma=86400' always;
    server_name             api.example-site.com;

    # SSL Configuration
    ssl_certificate         /etc/letsencrypt/live/example-site.com/fullchain.pem;
    ssl_certificate_key     /etc/letsencrypt/live/example-site.com/privkey.pem;
    ssl_trusted_certificate /etc/letsencrypt/live/example-site.com/chain.pem;

    # Include security and performance configs
    include                 conf.d/tls-intermediate.conf;
    include                 sites-security/example-site.com.conf;
    include                 conf.d/general.conf;
    include                 conf.d/performance.conf;
    include                 conf.d/cloudflare.conf;
    
    # Include snippets for API server
    include                 snippets/gzip.conf;
    include                 snippets/deny-files.conf;
    # include               snippets/rate-limiting.conf;  # Recommended for APIs

    # API-specific logging
    access_log              /var/log/nginx/api.example-site.com.access.log;
    error_log               /var/log/nginx/api.example-site.com.error.log warn;

    # API-specific security headers
    add_header X-API-Version "v1" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-Frame-Options "DENY" always;

    # CORS configuration for API
    add_header Access-Control-Allow-Origin "$http_origin" always;
    add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, PATCH, OPTIONS" always;
    add_header Access-Control-Allow-Headers "Authorization, Content-Type, Accept, X-Requested-With" always;
    add_header Access-Control-Allow-Credentials "true" always;
    add_header Access-Control-Max-Age "86400" always;

    # API health check
    location = /health {
        access_log off;
        add_header Content-Type "application/json" always;
        return 200 '{"status":"healthy","service":"api","version":"1.0","timestamp":"$time_iso8601"}';
    }

    # API documentation
    location = /docs {
        alias /var/www/api-docs/index.html;
        expires 1h;
    }

    location /docs/ {
        alias /var/www/api-docs/;
        expires 1h;
        try_files $uri $uri/ =404;
    }

    # Rate-limited API endpoints
    location /auth/ {
        limit_req               zone=api burst=10 nodelay;
        proxy_pass              http://backend_app;
        include                 conf.d/proxy.conf;
        proxy_set_header        X-Service "auth";
        proxy_set_header        X-Request-ID $request_id;
    }

    location /users/ {
        limit_req               zone=api burst=20 nodelay;
        proxy_pass              http://backend_app;
        include                 conf.d/proxy.conf;
        proxy_set_header        X-Service "users";
        proxy_set_header        X-Request-ID $request_id;
    }

    # File upload endpoint with larger body size
    location /upload/ {
        limit_req               zone=api burst=5 nodelay;
        client_max_body_size    50M;
        client_body_timeout     300s;
        
        proxy_pass              http://backend_app;
        include                 conf.d/proxy.conf;
        proxy_set_header        X-Service "upload";
        proxy_set_header        X-Request-ID $request_id;
        
        # Extended timeouts for uploads
        proxy_connect_timeout   30s;
        proxy_send_timeout      300s;
        proxy_read_timeout      300s;
    }

    # WebSocket support
    location /ws/ {
        proxy_pass              http://backend_app;
        
        # Essential WebSocket headers (from conf.d/websocket.conf)
        proxy_set_header        Upgrade $http_upgrade;
        proxy_set_header        Connection $connection_upgrade;
        
        # Standard proxy headers
        proxy_set_header        Host $host;
        proxy_set_header        X-Real-IP $remote_addr;
        proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header        X-Forwarded-Proto $scheme;
        proxy_set_header        X-Service "websocket";
        proxy_set_header        X-Request-ID $request_id;
        
        # WebSocket timeouts
        proxy_read_timeout      3600s;
        proxy_send_timeout      3600s;
        
        # Disable caching
        proxy_cache_bypass      $http_upgrade;
        proxy_no_cache          $http_upgrade;
    }

    # Main API routes
    location / {
        limit_req               zone=api burst=30 nodelay;
        proxy_pass              http://backend_app;
        include                 conf.d/proxy.conf;
        proxy_set_header        X-Service "api";
        proxy_set_header        X-Request-ID $request_id;
        
        # Handle preflight requests
        if ($request_method = 'OPTIONS') {
            add_header Access-Control-Allow-Origin "$http_origin" always;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, PATCH, OPTIONS" always;
            add_header Access-Control-Allow-Headers "Authorization, Content-Type, Accept, X-Requested-With" always;
            add_header Access-Control-Max-Age "86400" always;
            add_header Content-Length 0;
            return 204;
        }
    }

    # API error pages
    error_page 404 /404.json;
    location = /404.json {
        internal;
        add_header Content-Type "application/json" always;
        return 404 '{"error":"Not Found","message":"API endpoint not found","timestamp":"$time_iso8601"}';
    }

    error_page 500 502 503 504 /50x.json;
    location = /50x.json {
        internal;
        add_header Content-Type "application/json" always;
        return 500 '{"error":"Internal Server Error","message":"Please try again later","timestamp":"$time_iso8601"}';
    }
}

# Admin/Dashboard Subdomain (Enhanced Security)
server {
    listen                  443 ssl;
    listen                  [::]:443 ssl;
    listen                  443 quic;
    listen                  [::]:443 quic;
    http2                   on;
    http3                   on;
    add_header              Alt-Svc 'h3=":443"; ma=86400' always;
    server_name             admin.example-site.com;

    # SSL Configuration
    ssl_certificate         /etc/letsencrypt/live/example-site.com/fullchain.pem;
    ssl_certificate_key     /etc/letsencrypt/live/example-site.com/privkey.pem;
    ssl_trusted_certificate /etc/letsencrypt/live/example-site.com/chain.pem;

    # Include security and performance configs
    include                 conf.d/tls-intermediate.conf;
    include                 sites-security/example-site.com.conf;
    include                 conf.d/general.conf;
    include                 conf.d/performance.conf;
    include                 conf.d/cloudflare.conf;
    
    # Include optional snippets (uncomment as needed)
    include                 snippets/security-headers.conf;
    include                 snippets/gzip.conf;
    include                 snippets/static-files.conf;
    # include               snippets/brotli.conf;  # If brotli module available
    # include               snippets/rate-limiting.conf;  # For high-traffic sites
    include                 snippets/deny-files.conf;

    # Enhanced security headers for admin area
    add_header X-Frame-Options "DENY" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Permissions-Policy "geolocation=(), microphone=(), camera=(), payment=(), usb=(), magnetometer=(), gyroscope=(), speaker=()" always;
    
    # Strict CSP for admin area
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data:; connect-src 'self'; font-src 'self'; object-src 'none'; media-src 'self'; frame-ancestors 'none'; base-uri 'self'; form-action 'self';" always;

    # Admin-specific logging
    access_log              /var/log/nginx/admin.example-site.com.access.log;
    error_log               /var/log/nginx/admin.example-site.com.error.log warn;

    # Optional: IP whitelist for admin access (uncomment and configure as needed)
    # allow 192.168.1.0/24;    # Local network
    # allow 10.0.0.0/8;        # Private network
    # allow YOUR_OFFICE_IP;    # Office IP
    # deny all;

    # Rate limiting for admin area (stricter)
    location / {
        limit_req               zone=general burst=5 nodelay;
        
        # Admin authentication (if using basic auth)
        # auth_basic              "Admin Area";
        # auth_basic_user_file    /etc/nginx/.htpasswd;
        
        # Proxy to admin application
        proxy_pass              http://admin_app;
        include                 conf.d/proxy.conf;
        proxy_set_header        X-Service "admin";
        proxy_set_header        X-Request-ID $request_id;
        proxy_set_header        X-Admin-Access "true";
        
        # Additional security headers
        proxy_set_header        X-Forwarded-Proto $scheme;
        proxy_set_header        X-Real-IP $remote_addr;
    }

    # Admin API endpoints
    location /api/ {
        limit_req               zone=general burst=10 nodelay;
        
        # Enhanced security for admin API
        proxy_pass              http://admin_app;
        include                 conf.d/proxy.conf;
        proxy_set_header        X-Service "admin-api";
        proxy_set_header        X-Request-ID $request_id;
        proxy_set_header        X-Admin-API "true";
    }

    # Admin health check
    location = /health {
        access_log off;
        add_header Content-Type "application/json" always;
        return 200 '{"status":"healthy","service":"admin","timestamp":"$time_iso8601"}';
    }
}

# Backend upstream definitions
upstream backend_app {
    server 127.0.0.1:3000;
    # server 127.0.0.1:3001 backup;
    keepalive 32;
}

upstream admin_app {
    server 127.0.0.1:3100;
    # server 127.0.0.1:3101 backup;
    keepalive 16;
}