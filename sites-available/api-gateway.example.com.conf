# API Gateway Example Configuration
# This configuration demonstrates how to route different API endpoints to various backend services
# Example API structure:

# Upstream definitions for backend services
upstream auth_service {
    server 127.0.0.1:3001;
    # Add more servers for load balancing
    # server 127.0.0.1:3011 backup;
    keepalive 32;
}

upstream user_service {
    server 127.0.0.1:8001;
    # server 127.0.0.1:8011 backup;
    keepalive 32;
}

upstream order_service {
    server 127.0.0.1:8002;
    # server 127.0.0.1:8012 backup;
    keepalive 32;
}

upstream payment_service {
    server 127.0.0.1:8003;
    # server 127.0.0.1:8013 backup;
    keepalive 32;
}

upstream file_service {
    server 127.0.0.1:3002;
    # server 127.0.0.1:3012 backup;
    keepalive 32;
}

upstream analytics_service {
    server 127.0.0.1:8004;
    # server 127.0.0.1:8014 backup;
    keepalive 32;
}

# Rate limiting zones for different API endpoints
limit_req_zone $binary_remote_addr zone=auth_api:10m rate=5r/s;      # Authentication - stricter
limit_req_zone $binary_remote_addr zone=user_api:10m rate=10r/s;     # User operations
limit_req_zone $binary_remote_addr zone=order_api:10m rate=20r/s;    # Order operations
limit_req_zone $binary_remote_addr zone=payment_api:10m rate=3r/s;   # Payment - very strict
limit_req_zone $binary_remote_addr zone=file_api:10m rate=2r/s;      # File uploads - strict
limit_req_zone $binary_remote_addr zone=analytics_api:10m rate=50r/s; # Analytics - more permissive

# HTTP to HTTPS redirect
server {
    listen                  80;
    listen                  [::]:80;
    server_name             api.example.com;

    # Allow ACME challenge for Let's Encrypt
    include                 snippets/letsencrypt.conf;

    location / {
        return              301 https://$server_name$request_uri;
    }
}

# Main API Gateway Server
server {
    listen                  443 ssl;
    listen                  [::]:443 ssl;
    http2                   on;
    server_name             api.example.com;

    # SSL Configuration
    ssl_certificate         /etc/letsencrypt/live/api.example.com/fullchain.pem;
    ssl_certificate_key     /etc/letsencrypt/live/api.example.com/privkey.pem;
    ssl_trusted_certificate /etc/letsencrypt/live/api.example.com/chain.pem;

    # Optional: Include cloudflare if behind CF
    # include                 conf.d/cloudflare.conf;

    # API Gateway specific security headers
    add_header X-API-Gateway "nginx/api-gateway" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-Frame-Options "DENY" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    
    # CORS headers for API access
    add_header Access-Control-Allow-Origin "$http_origin" always;
    add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, PATCH, OPTIONS" always;
    add_header Access-Control-Allow-Headers "Authorization, Content-Type, Accept, Origin, User-Agent, DNT, Cache-Control, X-Mx-ReqToken, Keep-Alive, X-Requested-With, If-Modified-Since" always;
    add_header Access-Control-Allow-Credentials "true" always;
    add_header Access-Control-Max-Age "86400" always;

    # Logging with custom format for API gateway
    access_log              /var/log/nginx/api-gateway.access.log;
    error_log               /var/log/nginx/api-gateway.error.log warn;

    # Handle preflight OPTIONS requests
    location ~ ^/api/.* {
        if ($request_method = 'OPTIONS') {
            add_header Access-Control-Allow-Origin "$http_origin" always;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, PATCH, OPTIONS" always;
            add_header Access-Control-Allow-Headers "Authorization, Content-Type, Accept, Origin, User-Agent, DNT, Cache-Control, X-Mx-ReqToken, Keep-Alive, X-Requested-With, If-Modified-Since" always;
            add_header Access-Control-Allow-Credentials "true" always;
            add_header Access-Control-Max-Age "86400" always;
            add_header Content-Length 0;
            add_header Content-Type "text/plain charset=UTF-8";
            return 204;
        }
    }

    # API Health Check Endpoint
    location = /health {
        access_log off;
        add_header Content-Type "application/json" always;
        return 200 '{"status":"healthy","timestamp":"$time_iso8601","server":"$hostname"}';
    }

    # API Documentation (if you have static docs)
    location = /docs {
        alias /var/www/api-docs/index.html;
    }

    location /docs/ {
        alias /var/www/api-docs/;
        try_files $uri $uri/ =404;
    }

    # Authentication Service
    # Handles: /auth/login, /auth/logout, /auth/refresh, /auth/verify
    location /auth/ {
        limit_req               zone=auth_api burst=10 nodelay;
        
        # Remove /auth prefix when forwarding to backend
        rewrite                 ^/auth/(.*)$ /$1 break;
        
        proxy_pass              http://auth_service;
        # Standard proxy headers
        proxy_set_header        Host $host;
        proxy_set_header        X-Real-IP $remote_addr;
        proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header        X-Forwarded-Proto $scheme;
        proxy_set_header        X-Forwarded-Host $host;
        proxy_set_header        X-Request-ID $request_id;
        
        # Authentication service specific headers
        proxy_set_header        X-Service "auth";
        
        # Timeout settings for auth operations
        proxy_connect_timeout   10s;
        proxy_send_timeout      30s;
        proxy_read_timeout      30s;
    }

    # User Management Service
    # Handles: /users/profile, /users/settings, /users/list
    location /users/ {
        limit_req               zone=user_api burst=20 nodelay;
        
        rewrite                 ^/users/(.*)$ /$1 break;
        proxy_pass              http://user_service;
        # Standard proxy headers
        proxy_set_header        Host $host;
        proxy_set_header        X-Real-IP $remote_addr;
        proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header        X-Forwarded-Proto $scheme;
        proxy_set_header        X-Forwarded-Host $host;
        proxy_set_header        X-Request-ID $request_id;
        
        # User service specific headers
        proxy_set_header        X-Service "users";
        
        # Cache GET requests for user data
        location ~ ^/users/.*\.(json)$ {
            if ($request_method = GET) {
                expires 5m;
                add_header Cache-Control "public, must-revalidate";
            }
        }
    }

    # Order Processing Service
    # Handles: /orders/create, /orders/status, /orders/history
    location /orders/ {
        limit_req               zone=order_api burst=30 nodelay;
        
        rewrite                 ^/orders/(.*)$ /$1 break;
        proxy_pass              http://order_service;
        # Standard proxy headers
        proxy_set_header        Host $host;
        proxy_set_header        X-Real-IP $remote_addr;
        proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header        X-Forwarded-Proto $scheme;
        proxy_set_header        X-Forwarded-Host $host;
        proxy_set_header        X-Request-ID $request_id;
        
        # User service specific headers
        proxy_set_header        X-Service "users";
        
        # Increase timeouts for order processing
        proxy_connect_timeout   15s;
        proxy_send_timeout      60s;
        proxy_read_timeout      60s;
    }

    # Payment Service
    # Handles: /payments/process, /payments/refund, /payments/status
    location /payments/ {
        limit_req               zone=payment_api burst=5 nodelay;
        
        rewrite                 ^/payments/(.*)$ /$1 break;
        proxy_pass              http://payment_service;
        # Standard proxy headers
        proxy_set_header        Host $host;
        proxy_set_header        X-Real-IP $remote_addr;
        proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header        X-Forwarded-Proto $scheme;
        proxy_set_header        X-Forwarded-Host $host;
        proxy_set_header        X-Request-ID $request_id;
        
        # Payment service specific headers
        proxy_set_header        X-Service "payments";
        proxy_set_header        X-Payment-Gateway "nginx";
        
        # Longer timeouts for payment processing
        proxy_connect_timeout   20s;
        proxy_send_timeout      120s;
        proxy_read_timeout      120s;
        
        # Additional security headers for payments
        add_header              X-Content-Type-Options "nosniff" always;
        add_header              X-Frame-Options "DENY" always;
    }

    # File Upload Service
    # Handles: /files/upload, /files/download, /files/delete
    location /files/ {
        limit_req               zone=file_api burst=3 nodelay;
        
        # Increase client body size for file uploads
        client_max_body_size    100M;
        client_body_timeout     300s;
        
        rewrite                 ^/files/(.*)$ /$1 break;
        proxy_pass              http://file_service;
        # Standard proxy headers
        proxy_set_header        Host $host;
        proxy_set_header        X-Real-IP $remote_addr;
        proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header        X-Forwarded-Proto $scheme;
        proxy_set_header        X-Forwarded-Host $host;
        proxy_set_header        X-Request-ID $request_id;
        
        # File service specific headers
        proxy_set_header        X-Service "files";
        
        # Extended timeouts for file operations
        proxy_connect_timeout   30s;
        proxy_send_timeout      300s;
        proxy_read_timeout      300s;
        
        # Disable proxy buffering for large files
        proxy_buffering         off;
        proxy_request_buffering off;
    }

    # Analytics Service
    # Handles: /analytics/events, /analytics/reports, /analytics/metrics
    location /analytics/ {
        limit_req               zone=analytics_api burst=100 nodelay;
        
        rewrite                 ^/analytics/(.*)$ /$1 break;
        proxy_pass              http://analytics_service;
        # Standard proxy headers
        proxy_set_header        Host $host;
        proxy_set_header        X-Real-IP $remote_addr;
        proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header        X-Forwarded-Proto $scheme;
        proxy_set_header        X-Forwarded-Host $host;
        proxy_set_header        X-Request-ID $request_id;
        
        # Analytics service specific headers
        proxy_set_header        X-Service "analytics";
        
        # Cache analytics data
        location ~ ^/analytics/reports/.*$ {
            if ($request_method = GET) {
                expires 15m;
                add_header Cache-Control "public, must-revalidate";
            }
        }
    }

    # WebSocket support for real-time features
    # Example: /ws/notifications, /ws/chat
    location /ws/ {
        proxy_pass              http://auth_service; # or dedicated websocket service
        
        # Essential WebSocket headers (from conf.d/websocket.conf)
        proxy_set_header        Upgrade $http_upgrade;
        proxy_set_header        Connection $connection_upgrade;
        
        # Standard proxy headers
        proxy_set_header        Host $host;
        proxy_set_header        X-Real-IP $remote_addr;
        proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header        X-Forwarded-Proto $scheme;
        proxy_set_header        X-Service "websocket";
        proxy_set_header        X-Request-ID $request_id;
        
        # WebSocket timeouts
        proxy_read_timeout      3600s;
        proxy_send_timeout      3600s;
        
        # Disable caching
        proxy_cache_bypass      $http_upgrade;
        proxy_no_cache          $http_upgrade;
    }

    # API versioning example
    # Route /v1/ and /v2/ to different backend versions
    location /v1/ {
        rewrite                 ^/v1/(.*)$ /$1 break;
        proxy_pass              http://auth_service; # v1 services
        # Standard proxy headers
        proxy_set_header        Host $host;
        proxy_set_header        X-Real-IP $remote_addr;
        proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header        X-Forwarded-Proto $scheme;
        proxy_set_header        X-Forwarded-Host $host;
        proxy_set_header        X-Request-ID $request_id;
        
        # API version headers
        proxy_set_header        X-API-Version "v1";
    }

    location /v2/ {
        rewrite                 ^/v2/(.*)$ /$1 break;
        proxy_pass              http://user_service; # v2 services
        # Standard proxy headers
        proxy_set_header        Host $host;
        proxy_set_header        X-Real-IP $remote_addr;
        proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header        X-Forwarded-Proto $scheme;
        proxy_set_header        X-Forwarded-Host $host;
        proxy_set_header        X-Request-ID $request_id;
        
        # API version headers
        proxy_set_header        X-API-Version "v2";
    }

    # Catch-all for undefined API endpoints
    location / {
        add_header Content-Type "application/json" always;
        return 404 '{"error":"API endpoint not found","message":"Please check the API documentation","timestamp":"$time_iso8601"}';
    }

    # Error pages for API responses
    error_page 500 502 503 504 /50x.json;
    location = /50x.json {
        internal;
        add_header Content-Type "application/json" always;
        return 500 '{"error":"Internal server error","message":"Please try again later","timestamp":"$time_iso8601"}';
    }

    error_page 429 /429.json;
    location = /429.json {
        internal;
        add_header Content-Type "application/json" always;
        return 429 '{"error":"Rate limit exceeded","message":"Too many requests, please slow down","timestamp":"$time_iso8601"}';
    }
}